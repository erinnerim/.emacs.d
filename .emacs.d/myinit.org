* BASIC CONFIGURATION
#+BEGIN_SRC emacs-lisp
(setq user-mail-address "")
(setq initial-scratch-message "")
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(setq split-width-threshold nil)
(tool-bar-mode -1)
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(set-default 'visual-line-mode t)
(set-default 'truncate-lines t)
(global-set-key "\C-c$" 'toggle-truncate-lines)
(setq c-tab-always-indent nil)
(setq-default major-mode 'org-mode)
(set-language-environment "Latin-1")
;; (setq query-about-changed-file nil)
(setq revert-without-query '(".png"))
#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))

(setq package-enable-at-startup nil)
(package-initialize)

(unless (package-installed-p 'use-package)
(package-refresh-contents)
(package-install 'use-package))

(eval-when-compile
(require 'use-package))
#+END_SRC
* USE THEMES
** Theme Directory
#+BEGIN_SRC emacs-lisp
(let ((basedir "~/.emacs.d/themes/"))
  (dolist (f (directory-files basedir))
    (if (and (not (or (equal f ".") (equal f "..")))
             (file-directory-p (concat basedir f)))
        (add-to-list 'custom-theme-load-path (concat basedir f)))))
#+END_SRC
** Custom Theme Packages
#+BEGIN_SRC emacs-lisp
(use-package autumn-light-theme :ensure t)
(use-package avk-emacs-themes :ensure t)
(use-package blackboard-theme :ensure t)
(use-package bliss-theme :ensure t)
(use-package bubbleberry-theme :ensure t)
(use-package color-theme-modern :ensure t)
(use-package colorless-themes :ensure t)
(use-package constant-theme :ensure t)
(use-package dream-theme :ensure t)
(use-package kaolin-themes :ensure t)
(use-package lavenderless-theme :ensure t)
(use-package modus-themes :ensure t)
(use-package moe-theme :ensure t)
(use-package nord-theme :ensure t)
(use-package nordless-theme :ensure t)
(use-package northcode-theme :ensure t)
(use-package nothing-theme :ensure t)
(use-package notink-theme :ensure t)
(use-package nova-theme :ensure t)
(use-package obsidian-theme :ensure t)
(use-package parchment-theme :ensure t)
(use-package peacock-theme :ensure t)
(use-package quasi-monochrome-theme :ensure t)
(use-package shanty-themes :ensure t)
(use-package tommyh-theme :ensure t)
(use-package twilight-anti-bright-theme :ensure t)
(use-package twilight-bright-theme :ensure t)
(use-package twilight-theme :ensure t)
(use-package underwater-theme :ensure t)
(use-package white-theme :ensure t)
#+END_SRC

** Theme Consistency
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.0))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.0))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))
#+END_SRC
* THEMES
** Default Theme
#+BEGIN_SRC emacs-lisp
(load-theme 'base16-black-metal-nile t)
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
(setq default-face "Targa MS Hand-13")
(defun efs/set-font-faces ()
  (message "Setting faces.")
  (set-face-attribute 'default nil :font default-face))
;; (set-face-attribute 'default nil
;; 		      :family "Targa MS Hand"
;; 		      :weight 'light
;; 		      :height 130))

(custom-theme-set-faces
 'user
 '(variable-pitch ((t (:family "Chilanka" :weight thin)))))
#+END_SRC
** Scroll-Bars
#+BEGIN_SRC emacs-lisp
  (defun my/disable-scroll-bars (frame)
    (modify-frame-parameters frame
			     '((vertical-scroll-bars . nil)
			       (horizontal-scroll-bars . nil))))
  (add-hook 'after-make-frame-functions 'my/disable-scroll-bars)
#+END_SRC
* EMACSCLIENT
#+BEGIN_SRC emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
		(lambda (frame)
		  (with-selected-frame frame
		    (efs/set-font-faces)))))
		    ;; (my/disable-scroll-bars))
		    ;; (set-face-attribute 'default nil :font "Targa MS-12")))
#+END_SRC
* PACKAGES
** Async
#+BEGIN_SRC emacs-lisp
  (use-package dired-rsync
    :ensure t)
  ;;;###autoload
  (defun ora-dired-rsync (dest)
    (interactive
     (list
      (expand-file-name
       (read-file-name
        "Rsync to:"
        (dired-dwim-target-directory)))))
    ;; store all selected files into "files" list
    (let ((files (dired-get-marked-files
                  nil current-prefix-arg))
          ;; the rsync command
          (tmtxt/rsync-command
           "rsync -arvz --progress "))
      ;; add all selected file names as arguments
      ;; to the rsync command
      (dolist (file files)
        (setq tmtxt/rsync-command
              (concat tmtxt/rsync-command
                      (shell-quote-argument file)
                      " ")))
      ;; append the destination
      (setq tmtxt/rsync-command
            (concat tmtxt/rsync-command
                    (shell-quote-argument dest)))
      ;; run the async shell command
      (async-shell-command tmtxt/rsync-command "*rsync*")
      ;; finally, switch to that window
      (other-window 1)))

(define-key dired-mode-map "Y" 'ora-dired-rsync)
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :config
  (avy-setup-default))
(use-package ace-window
  :ensure t
  :config
  (setq aw-keys '(?j ?k ?l ?; ?u ?i ?o ?p ?m ?, ?. ?/))
  (ace-window-display-mode t))
(use-package ace-jump-buffer
  :ensure t)
(defun my-fallback-function ()
  message "Your isearch string is %s", isearch-string)
(use-package ace-mc
  :ensure t)
(setq ivy-height 20)
#+END_SRC
** Buffer-Move
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t)
#+END_SRC
** Calendar
#+BEGIN_SRC emacs-lisp
  (use-package calendar
    :bind (:map calendar-mode-map
                ("J" . calendar-backward-day)
                ("L" . calendar-forward-day)
                ("I" . calendar-backward-week)
                ("K" . calendar-forward-week)))
#+END_SRC
** Copyit
#+BEGIN_SRC emacs-lisp
  (use-package copyit
    :ensure t)
#+END_SRC
** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)
#+END_SRC
** Dimmer
#+BEGIN_SRC emacs-lisp
  (use-package dimmer
    :ensure t
    :config
      (dimmer-configure-which-key)
      (dimmer-configure-helm)
      (dimmer-configure-magit)
      (dimmer-mode t)
      (setq dimmer-fraction 0.1))

  (load "~/.emacs.d/elpa/doremi/doremi.el")
  (require 'doremi)
  (load "~/.emacs.d/elpa/doremi/doremi-cmd.el")
  (require 'doremi-cmd)

  (setq-default dired-listing-switches "-alh --group-directories-first")
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :bind (:map dired-mode-map
                ("C-<up>" . dired-up-directory)
                ("C-<down>" . dired-find-file)
                ("C-S-i" . dired-up-directory)
                ("C-S-k" . dired-find-file)
                ("," . dired-previous-line)
                ("." . dired-next-line)
                ("M-," . dired-up-directory)
                ("M-." . dired-find-file)
                ("M-'" . dired-find-file))
    :hook (dired-mode . dired-hide-details-mode)
    :config
    (use-package dired-git-info
      :ensure t
      :bind (:map dired-mode-map
                  (")" . dired-git-info-mode))))
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t)
#+END_SRC
** Gnuplot
#+BEGIN_SRC emacs-lisp
  (use-package gnuplot
    :ensure t)
  (use-package gnuplot-mode
    :ensure t)
#+END_SRC
** Golden Ratio
#+BEGIN_SRC emacs-lisp
    (use-package golden-ratio
      :ensure t)
#+END_SRC
** Ibuffer
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-git
    :ensure t)
  (setq ibuffer-formats
	'((mark modified read-only " "
		(name 18 18 :left :elide) " "
		(size 9 -1 :right) " "
		(mode 16 16 :left :elide) " "
		(git-status 8 8 :left)
		filename-and-process)
	  (mark " " (name 16 -1) " " filename)))

  (setq ibuffer-saved-filter-groups
	(quote (("default"
		 ("terminal" (mode . term-mode))
		 ("dired" (mode . dired-mode))
		 ("emacs" (or
			   (name . "^\\*scratch\\*$")
			   (name . "^\\*Messages\\*$")
			   (name . "^\\*Warnings\\*$")))
		 ))))

  (setq ibuffer-default-sorting-mode 'major-mode)

  (add-hook 'ibuffer-mode-hook
	    (lambda ()
	      (ibuffer-switch-to-saved-filter-groups "default")))

  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
#+END_SRC
** Image-Dired
#+BEGIN_SRC emacs-lisp
  (use-package image-dired
    :bind (:map image-dired-thumbnail-mode-map
                 ("," . image-dired-backward-image)
                 ("." . image-dired-forward-image)
                 ("M-j" . image-dired-backward-image)
                 ("M-l" . image-dired-forward-image)))

  ;; Define external image viewer/editor
  (setq image-dired-external-viewer "/usr/bin/lximage-qt")

  ;; Image-dired Keyboard shortcuts
  (with-eval-after-load 'dired
      (define-key dired-mode-map (kbd "I") 'image-dired)
      (define-key dired-mode-map (kbd "C-<return>") 'image-dired-dired-display-external))
#+END_SRC
** JSON to Org Table
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/elisp")
     (require 'json-to-org-table)
   #+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind (:map magit-status-mode-map
              ("<tab>" . magit-section-cycle)))
#+END_SRC
** Multi-Term
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :ensure t
    :config
    (setq multi-term-program "/bin/bash"))
#+END_SRC
** Org Agenda
*** Customize
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-start-day "-1d")
  (setq org-agenda-span 8)
  (setq org-agenda-timegrid-use-ampm t)
  (add-to-list 'display-buffer-alist
	       '("\\*Help\\*" (display-buffer-same-window)))
#+END_SRC
*** Org Agenda Force-Font-Lock for Prettify-Symbols
    Source: this Reddit [[https://www.reddit.com/r/orgmode/comments/i3upt6/prettifysymbolsmode_not_working_with_orgagenda/][post]] by yantar92.
    Note that this causes more significant lag for some Agenda functions such as "list all TODO-entries".
#+BEGIN_SRC emacs-lisp
  (define-advice org-agenda-format-item (:filter-args (&rest args)  fontify-org)
    "Force fontify ageda item. (hack)"
    (cl-multiple-value-bind (extra txt level category tags dotime remove-re habitp) (car args)
      (with-temp-buffer
	(cl-letf (((symbol-function 'yant/process-att-abbrev) #'identity)
		  ((symbol-function 'yant/process-att-id-abbrev) #'identity)) ;; expanding sometimes causes errors when attempting to access ancestors
	  (org-mode)
	  (setq txt (replace-regexp-in-string "[ \t]*:[[:alnum:]_@#%:]+:[ 	]*$" "" txt))
	  (insert "* "
		  txt
		  "\t"
		  (or (and tags (s-join ":" `(nil ,@(cl-remove-duplicates tags) nil)))
		      "")
		  "\n")
	  (font-lock-fontify-buffer)
	  (goto-char (point-min))
	  (looking-at "^\\* \\(\\([^\t]+\\)[ 	]+\\(:\\([[:alnum:]_@#%:]+\\):\\)*\\)[ 	]*$")
	  (setq txt (match-string 2))
	  (setq tags (and tags (s-split ":" (match-string 3) 't)))
	  )
	(list extra txt level category tags dotime remove-re habitp)))
    )
#+END_SRC
** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (setq org-bullets-face-name (quote org-bullet-face))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (setq org-bullets-bullet-list '("❖")))
#+END_SRC
** Org Roam
*** Org-Roam Load 
#+BEGIN_SRC emacs-lisp
    (use-package org-roam
      :ensure t
      :demand t
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory "~/Notes")
      (org-roam-completion-system 'ivy)
      (org-roam-completion-everywhere t)
      ;; (org-roam-node-display-template "${title} ${tag}")
      (org-roam-capture-templates
       '(("d" "Default" plain
	  "%?"
	  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n")
	  :unnarrowed t)
	 ("r" "Reference" plain
	  "* Overview\n  %?\n* References\n  "
	  :if-new (file+head "./References/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Reference\n")
	  :unnarrowed t)
	 ("a" "Agenda" plain
	  (file "~/Notes/Templates/AgendaTemplate.org")
	  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: :Agenda:\n")
	  :unnarrowed t)
	 ("p" "Project" plain
	  (file "~/Notes/Templates/ProjectTemplate.org")
	  :if-new (file+head "./Project/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: :Project:\n")
	  :unnarrowed t)
	 ("l" "Place" plain
	  (file "~/Notes/Templates/PlaceTemplate.org")
	  :if-new (file+head "./Places/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: :Place:Reference:\n")
	  :unnarrowed t)
	 ("e" "Person" plain
	  (file "~/Notes/Templates/PersonTemplate.org")
	  :if-new (file+head "./People/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: :Person:Reference:\n")
	  :unnarrowed t)))
      :bind (("C-c l" . org-roam-buffer-toggle)
	     ("C-c f" . my-org-roam-node-find)
	     ("C-c n i" . my-org-roam-node-insert)
	     ("C-c n t" . org-roam-tag-add)
	     :map org-mode-map
	     ("C-M-<tab>" . completion-at-point)
	     :map org-roam-dailies-map
	     ("Y" . org-roam-dailies-capture-yesterday)
	     ("T" . org-roam-dailies-capture-tomorrow)
	     ("d" . org-roam-dailies-goto-date)
	     ("c" . org-roam-dailies-capture-date))
      :bind-keymap
      ("C-c n m" . org-roam-dailies-map)
      :config
      (require 'org-roam-dailies)
      (org-roam-setup))

  (setq myroamfiles (directory-files org-roam-directory t "org$"))
  ;; (org-id-update-id-locations myroamfiles)
#+END_SRC
*** Org-Roam Functions
#+BEGIN_SRC emacs-lisp
  (defun my-org-roam-node-find ()
    (interactive)
    (unwind-protect
        ;; unwind-protect is required to turn off ivy
        ;; even when you cancel without choosing a node
        (progn
          (ivy-mode +1)
          (org-roam-node-find))  
      (ivy-mode -1)))

  (defun my-org-roam-node-insert ()
    (interactive)
    (unwind-protect
        ;; unwind-protect is required to turn off ivy
        ;; even when you cancel without choosing a node
        (progn
          (ivy-mode +1)
          (org-roam-node-insert))
      (ivy-mode -1)))

  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-notes-by-tag "Agenda")))

  ;; (my/org-roam-refresh-agenda-list)
  (add-hook 'org-agenda-redo-all #'my/org-roam-refresh-agenda-list)
#+END_SRC
*** Org-Roam Buffer
#+BEGIN_SRC emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (slot . 0)
                 (window-width . 0.33)
                 (window-parameters . ((no-other-window . t)
                                       (no-delete-other-windows . t)))))
  ;; (setq org-roam-mode-section-functions
  ;;       (list #'org-roam-backlinks-section
  ;;             #'org-roam-reflinks-section
  ;;             #'org-roam-unlinked-references-section
  ;;             ))
#+END_SRC
** Org-Transclude
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'org-transclusion-extensions 'org-transclusion-indent-mode)
  ;; (require 'org-transclusion-indent-mode)
  (use-package org-transclusion
    :ensure t)
#+END_SRC
** Peep-dired
#+BEGIN_SRC emacs-lisp
  (use-package peep-dired
    :ensure t
    :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
    :bind (:map dired-mode-map
                ("P" . peep-dired))
    :bind (:map peep-dired-mode-map
                ("M-i" . peep-dired-prev-file)
                ("M-k" . peep-dired-next-file)
                ("M-," . peep-dired-prev-file)
                ("M-." . peep-dired-next-file)))
#+END_SRC
** Pyvenv
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :ensure t)
#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t)
#+END_SRC
** Term-Mode
#+BEGIN_SRC emacs-lisp
  (use-package term-mode
    :bind (:map term-mode-map
	("C-S-v" . term-paste)))
#+END_SRC
** Tex-Preview
#+BEGIN_SRC emacs-lisp
;; (setq org-format-latex-options
;;       (plist-put org-format-latex-options
;; 		 :scale 2.0
;; 		 :background "Transparent"
;; 		 :foreground "Black"))
;; (set-default 'preview-default-document-pt 20)
;; (add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t)))
;; (setq org-latex-create-formula-image-program 'dvisvgm)
(setq org-latex-create-formula-image-program 'dvipng)
(setq org-preview-latex-image-directory "~/.emacs.d/ltximg/")
#+END_SRC
#+BEGIN_SRC emacs-lisp
;; (defun myfunction ()
;;   ;; (interactive))
(defun delete-latex-previews ()
  ;; (interactive)
  (setq files-to-delete
	(file-expand-wildcards
	 (concat org-preview-latex-image-directory "*")))
  (message "Deleting org-latex previews from %s"
	   org-preview-latex-image-directory)
  (dolist (file files-to-delete)
    (message "Deleting file: %s" file)
    (delete-file file)))
(advice-add 'load-theme :after #'delete-latex-previews)
(advice-add 'counsel-load-theme :after #'delete-latex-previews)
#+END_SRC
** Vulpea
   Management of Org-Agenda with many Notes files: [[https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html][Source]]
#+BEGIN_SRC emacs-lisp
  (defun vulpea-buffer-prop-get (name)
    "Get a buffer property called NAME as a string."
    (org-with-point-at 1
      (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
			       (point-max) t)
	(buffer-substring-no-properties
	 (match-beginning 1)
	 (match-end 1)))))

  (defun vulpea-buffer-prop-set (name value)
    "Set a file property called NAME to VALUE in buffer file.
  If the property is already set, replace its value."
    (setq name (downcase name))
    (org-with-point-at 1
      (let ((case-fold-search t))
	(if (re-search-forward (concat "^#\\+" name ":\\(.*\\)")
			       (point-max) t)
	    (replace-match (concat "#+" name ": " value) 'fixedcase)
	  (while (and (not (eobp))
		      (looking-at "^[#:]"))
	    (if (save-excursion (end-of-line) (eobp))
		(progn
		  (end-of-line)
		  (insert "\n"))
	      (forward-line)
	      (beginning-of-line)))
	  (insert "#+" name ": " value "\n")))))

  (defun vulpea-buffer-prop-set-list (name values &optional separators)
    "Set a file property called NAME to VALUES in current buffer.
  VALUES are quoted and combined into single string using
  `combine-and-quote-strings'.
  If SEPARATORS is non-nil, it should be a regular expression
  matching text that separates, but is not part of, the substrings.
  If nil it defaults to `split-string-default-separators', normally
  \"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t.
  If the property is already set, replace its value."
    (vulpea-buffer-prop-set
     name (combine-and-quote-strings values separators)))

  (defun vulpea-buffer-prop-get-list (name &optional separators)
    "Get a buffer property NAME as a list using SEPARATORS.
  If SEPARATORS is non-nil, it should be a regular expression
  matching text that separates, but is not part of, the substrings.
  If nil it defaults to `split-string-default-separators', normally
  \"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t."
    (let ((value (vulpea-buffer-prop-get name)))
      (when (and value (not (string-empty-p value)))
	(split-string-and-unquote value separators))))

  (defun vulpea-buffer-title-get ()
    "Get TITLE in current buffer."
    (vulpea-buffer-prop-get "title"))

  (defun vulpea-buffer-title-set (title)
    "Set TITLE in current buffer.
  If the title is already set, replace its value."
    (vulpea-buffer-prop-set "title" title))

  (defun vulpea-buffer-tags-get ()
    "Return filetags value in current buffer."
    (vulpea-buffer-prop-get-list "filetags" " "))

  (defun vulpea-buffer-tags-set (&rest tags)
    "Set TAGS in current buffer.
  If filetags value is already set, replace it."
    (vulpea-buffer-prop-set "filetags" (string-join tags " ")))

  (defun vulpea-project-update-tag ()
	"Update PROJECT tag in the current buffer."
	(when (and (not (active-minibuffer-window))
		   (vulpea-buffer-p))
	  (save-excursion
	    (goto-char (point-min))
	    (let* ((tags (vulpea-buffer-tags-get))
		   (original-tags tags))
	      (if (vulpea-project-p)
		  (setq tags (cons "Agenda" tags))
		(setq tags (remove "Agenda" tags)))

	      ;; cleanup duplicates
	      (setq tags (seq-uniq tags))

	      ;; update tags if changed
	      (when (or (seq-difference tags original-tags)
			(seq-difference original-tags tags))
		(apply #'vulpea-buffer-tags-set tags))))))

  (defun vulpea-buffer-p ()
    "Return non-nil if the currently visited buffer is a note."
    (and buffer-file-name
	 (string-prefix-p
	  (expand-file-name (file-name-as-directory org-roam-directory))
	  (file-name-directory buffer-file-name))))

  (defun vulpea-project-p ()
    "Return non-nil if current buffer has any todo entry.

  TODO entries marked as done are ignored, meaning the this
  function returns nil if current buffer contains only completed
  tasks."
    (org-element-map                          ; (2)
	 (org-element-parse-buffer 'headline) ; (1)
	 'headline
       (lambda (h)
	 (eq (org-element-property :todo-type h)
	     'todo))
       nil 'first-match))

  (add-hook 'find-file-hook #'vulpea-project-update-tag)
  (add-hook 'before-save-hook #'vulpea-project-update-tag)
#+END_SRC
* MODES
** Help
#+BEGIN_SRC emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\*Help\\*" (display-buffer-same-window)))
#+END_SRC
** Image Mode
#+BEGIN_SRC emacs-lisp
  (define-key image-mode-map (kbd "M-,") 'quit-window)
#+END_SRC
** Org Mode
*** Basic Configuration
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-clock-sound "~/.emacs.d/assets/Small_Gong.wav")
    (setq org-confirm-babel-evaluate nil))
#+END_SRC
*** Org Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
  (setq org-src-preserve-indentation t)
  (org-babel-do-load-languages
   'org-babel-load-languages '((C . t)))
  (org-babel-do-load-languages
   'org-babel-load-languages '((shell . t)))
  (org-babel-do-load-languages
   'org-babel-load-languages '((gnuplot . t)))
#+END_SRC
*** Behavior and Style
#+BEGIN_SRC emacs-lisp
  (setq org-startup-folded t)
  (setq org-level-color-stars-only t)
  (setq org-ellipsis "▼")
  (setq org-hide-emphasis-markers t)
  (setq org-display-custom-times t)
  (setq org-time-stamp-custom-formats '("<%m/%d/%y %a>" . "<%m/%d/%y %a %I:%M %p>"))
  (define-key org-mode-map (kbd "C-\'") 'org-cycle)
  (define-key org-mode-map (kbd "M-\'") 'org-cycle)
  (define-key org-mode-map (kbd "M-\"") 'org-shifttab) ;"
  (define-key org-mode-map (kbd "M-[") 'org-backward-element)

  (define-key org-mode-map (kbd "M-]") 'org-forward-element)
  (define-key org-mode-map (kbd "M-,") 'org-previous-visible-heading)
  (define-key org-mode-map (kbd "M-.") 'org-next-visible-heading)
  (define-key org-mode-map (kbd "<M-return>") 'org-open-at-point)
  (define-key org-mode-map (kbd "M-N") 'org-meta-return)
  (define-key org-mode-map (kbd "C-t") 'org-todo)

  (defun my-outline-up-heading ()
    (interactive)
    (progn (call-interactively 'outline-up-heading)
	   (call-interactively 'org-cycle)))
  (define-key org-mode-map (kbd "M-{") 'my-outline-up-heading)
  (define-key org-mode-map (kbd "M-}") 'org-reveal)
  (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "»")
					 ("#+END_SRC" . "«")
					 ("#+begin_src" . "»")
					 ("#+end_src" . "«")
					 ("TODO" . "🞙")
					 ("DONE" . "🞛")
					 ("SUB" . "▶")
					 ("lambda" . "λ")))
  (add-hook 'org-mode-hook
	    (lambda ()
	      ;; (org-indent-mode)
	      (org-transclusion-mode)
	      (prettify-symbols-mode)))
#+END_SRC
** Org Src
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Tab Bar
#+BEGIN_SRC emacs-lisp
  (setq tab-bar-show nil)
#+END_SRC
* CUSTOM FUNCTIONS
** Add Tab In Front of Current
#+BEGIN_SRC emacs-lisp
  (defun tabbar-add-tab (tabset object &optional append)
      "Override tabbar-add-tab, makes new tab open on the right of the current tab"
      (let ((tabs (tabbar-tabs tabset)))
        (if (tabbar-get-tab object tabset)
            tabs
          (let ((tab (tabbar-make-tab object tabset))
                (previous-tab (tabbar-selected-tab tabset))
                (other-tabs (list)))
            (tabbar-set-template tabset nil)
            (if append
                (progn
                  (while (not (string= (format "%s" (car previous-tab)) (format "%s" (car (car tabs)))))
                    (push (car tabs) other-tabs)
                    (setq tabs (cdr tabs)))
                  (push (car tabs) other-tabs)
                  (setq tabs (cdr tabs))
                  (push tab other-tabs)
                  (setq other-tabs (reverse other-tabs))
                  (set tabset (append other-tabs tabs)))
              (set tabset(cons tab tabs)))))))
#+END_SRC
** Copy File Path of Current Buffer
#+BEGIN_SRC emacs-lisp
  (defun xah-copy-file-path (&optional DirPathOnlyQ)
    "Copy current buffer file path or dired path.
  Result is full path.
  If `universal-argument' is called first, copy only the dir path.

  If in dired, copy the current or marked files.

  If a buffer is not file and not dired, copy value of `default-directory'.

  URL `http://xahlee.info/emacs/emacs/emacs_copy_file_path.html'
  Version 2018-06-18 2021-09-30"
    (interactive "P")
    (let (($fpath
           (if (string-equal major-mode 'dired-mode)
               (progn
                 (let (($result (mapconcat 'identity (dired-get-marked-files) "\n")))
                   (if (equal (length $result) 0)
                       (progn default-directory )
                     (progn $result))))
             (if (buffer-file-name)
                 (buffer-file-name)
               (expand-file-name default-directory)))))
      (kill-new
       (if DirPathOnlyQ
           (progn
             (message "Directory copied: %s" (file-name-directory $fpath))
             (file-name-directory $fpath))
         (progn
           (message "File path copied: %s" $fpath)
           $fpath )))))
#+END_SRC
** Dedicated Windows
#+BEGIN_SRC emacs-lisp
(defun toggle-current-window-dedication ()
  (interactive)
  (let* ((window (selected-window))
	 (dedicated (window-dedicated-p window)))
    (set-window-dedicated-p window (not dedicated))
    (message "Window %dedicated to %s"
	     (if dedicated "no longer " "")
	     (buffer-name))))
#+END_SRC
** Eshell Instance
#+BEGIN_SRC emacs-lisp
(defun eshell-new()
  "Open a new instance of eshell."
  (interactive)
  (eshell 'N))
#+END_SRC
** Load Config File
#+BEGIN_SRC emacs-lisp
  (defun load-user-config () 
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+END_SRC
** Selective Display
#+BEGIN_SRC emacs-lisp
  (defun toggle-selective-display (column)
    (interactive "P")
    (set-selective-display
     (or column
	 (unless selective-display
	   (1+ (current-column))))))

  (defun toggle-hiding (column)
    (interactive "P")
    (if hs-minor-mode
	(if (condition-case nil
		(hs-toggle-hiding)
	      (error t))
	    (hs-show-all))
      (toggle-selective-display column)))

  (load-library "hideshow")

  (defun jump-to-same-indent (direction)
    (interactive "P")
    (let ((start-indent (current-indentation)))
      (while
	  (and (not (bobp))
	       (zerop (forward-line (or direction 1)))
	       (or (= (current-indentation)
		      (- (line-end-position) (line-beginning-position)))
		   (> (current-indentation) start-indent)))))
    (back-to-indentation))
#+END_SRC
** Split-4-Ways
#+BEGIN_SRC emacs-lisp
(defun split-4-ways ()
  (interactive)
  (split-window-right)
  (split-window-below)
  (windmove-right)
  (split-window-below)
  (windmove-left))
#+END_SRC
** Style Customization
*** Set Default Face From Favorites
 #+BEGIN_SRC emacs-lisp
(defun erin/set-face (x d)
  "Set default face"
  (interactive
   (list
    (ivy-completing-read
     "Face: " '(
		"IckyTicket Mono-14"
		"Isabelle Layne Bold-20"
		"Names Titles-14"
		"Novamono-13"
		"Pixeltype-24"
		"Plasmatic-14"
		"Source Code Pro-12"
		"Targa-13"
		"Targa MS Hand-13"
		"Typori-14"
		"Underwood Champion-14"
		"unscii-16"))
  (read-number "Height:")))
  (message "Setting face to: %s with height %d" x d)
  (setq default-face x)
  (set-face-attribute 'default nil :font x :height d))
 #+END_SRC

 #+RESULTS:
 : erin/set-face

*** Load Theme From Favorites
 #+BEGIN_SRC emacs-lisp
(defun erin/load-theme (x)
  "Load favorite theme"
  (interactive
   (list
    (ivy-completing-read
     "Theme: "
     '("atelier-estuary-light"
       "base16-black-metal-dark-funeral"
       "base16-rose-pine"
       "base16-silk-light"
       "blackboard"
       "bubbleberry"
       "constant-light"
       "dark-laptop"
       "eziam-light"
       "goldenrod"
       "kaolin-eclipse"
       "lavenderless"
       "modus-vivendi"
       "notink"
       "parchment"
       "phoenix-dark-pink"
       "purple-haze"
       "railscast"
       "sketch-black"
       "sketch-white"
       "solarized-dark"
       "twilight"
       "late-night"
       "twilight-anti-bright"
       ))))
  (message "Loading theme: %s" x)
  (setq current-theme x)
  (counsel-load-theme-action x))

;; (load-theme 'late-night t)
;; (load-theme 'modus-vivendi t)
;; (load-theme 'constant-light t)
;; (load-theme 'eziam-light t)
;; (load-theme 'kaolin-eclipse t)
;; (load-theme 'bubbleberry t)
;; (load-theme 'blackboard t)
;; (load-theme 'twilight t)
;; (load-theme 'twilight-anti-bright t)
;; (load-theme 'notink t)
;; (load-theme 'lavenderless t)
;; (load-theme 'fischmeister t)
;; (load-theme 'dark-laptop t)
;; (load-theme 'dark-font-lock t)
;; (load-theme 'comidia t)
;; (load-theme 'purple-haze t)
;; (load-theme 'base16-rose-pine t)
;; (load-theme 'base16-silk-light t)
;; (load-theme 'phoenix-dark-pink t)
;; (load-theme 'base16-black-metal-dark-funeral t)
;; (load-theme 'parchment t)
;; (load-theme 'railscast t)

;; Normal
;; (load-theme 'base16-apathy t)
;; (load-theme 'base16-equilibrium-dark t)
;; (load-theme 'base16-horizon-light t)
;; (load-theme 'base16-humanoid-light t)
;; (load-theme 'base16-marrakesh t)
;; (load-theme 'base16-icy t)
;; (load-theme 'base16-equilibrium-gray-light t)
;; (load-theme 'base16-greenscreen t)
;; (load-theme 'base16-pico t)
;; (load-theme 'base16-silk-dark t)
;; (load-theme 'base16-rose-pine-moon t)
;; (load-theme 'wheatgrass t)
;; (load-theme 'base16-atelier-cave t)
;; (load-theme 'base16-ia-dark t)
;; (load-theme 'goldenrod t)
;; (load-theme 'high-contrast t)
;; (load-theme 'jedit-grey t)
;; (load-theme 'white-sand t)
;; (load-theme 'spacemacs-dark t)
;; (load-theme 'solarized-light-high-contrast t)
;; (load-theme 'base16-ashes t)
;; (load-theme 'subdued t)
;; (load-theme 'solarized-gruvbox-dark t)
;; (load-theme 'base16-black-metal-gorgoroth t)
;; (load-theme 'aalto-dark t)
;; (load-theme 'whiteboard t)

;; Use with redshift
;; (load-theme 'manoj-dark t)
 #+END_SRC

 #+RESULTS:
 : erin/load-theme

** Text Macros
#+BEGIN_SRC emacs-lisp
  (defun insert-text-begin-src ()
    (interactive)
    (insert "#+BEGIN_SRC"))
  (defun insert-text-end-src ()
    (interactive)
    (insert "#+END_SRC"))
#+END_SRC
** Reverting Buffer
#+BEGIN_SRC emacs-lisp
(defun revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive) (revert-buffer t t))
#+END_SRC
* GLOBAL KEYBINDINGS
** Buffers
#+BEGIN_SRC emacs-lisp
  (bind-keys*
   ("C-S-<up>" . buf-move-up)
   ("C-S-<down>" . buf-move-down)
   ("C-S-<left>" . buf-move-left)
   ("C-S-<right>" . buf-move-right)
   ("C-S-i" . buf-move-up)
   ("C-S-k" . buf-move-down)
   ("C-S-l" . buf-move-right)
   ("C-S-j" . buf-move-left)
   ("C-<" . previous-buffer)
   ("C->" . next-buffer)
   ("<XF86Forward>" . next-buffer)
   ("<XF86Back>" . previous-buffer)
   ("M-<backspace>" . delete-forward-char)
   ("M-S-<backspace>" . kill-buffer))
#+END_SRC
** Launch
#+BEGIN_SRC emacs-lisp
(bind-keys*
 ;; Launching with C-*
 ("C-x C-b" . ibuffer)
 ("C-x C-a" . org-agenda)
 ("C-c c" . calendar)
 ;; Launching with M-*
 ("M-E" . eshell-new)
 ("M-e" . multi-term)
 ("M-b" . ibuffer)
 ("M-a" . org-agenda))
#+END_SRC
** Load Config
#+BEGIN_SRC emacs-lisp
  (bind-keys*
   ("M-R" . load-user-config))
#+END_SRC
** Miscellaneous
#+BEGIN_SRC emacs-lisp
  (bind-keys*
   ("C-z" . undo)
   ("C-\\" . undo)
   ("C-r" . revert-buffer-no-confirm)
   ("C-c v" . visual-line-mode)
   ("M-u" . universal-argument)
   ("M-x" . counsel-M-x)
   ("C-x e" . compile)
   ("C-x _" . call-last-kbd-macro))
#+END_SRC
** Remap Problematic Keys
#+BEGIN_SRC emacs-lisp
(setq local-function-key-map (delq '(kp-tab . [9]) local-function-key-map))
(add-hook 'eshell-mode-hook
	  (lambda () (define-key eshell-mode-map (kbd "<tab>") 'completion-at-point)))
(defun term-send-tab ()
  "Send the tab key raw to term-mode."
  (interactive)
  (term-send-raw-string "\C-i"))
(add-hook 'term-mode-hook
	  (lambda () (define-key term-raw-map (kbd "M-<tab>") 'term-send-tab)))
(global-set-key (kbd "<tab>") 'indent-for-tab-command)
(define-key ivy-minibuffer-map (kbd "<tab>") 'ivy-partial-or-done)
#+END_SRC
** Scrolling
#+BEGIN_SRC emacs-lisp
  (bind-keys*
   ("C-," . scroll-down-command)
   ("C-." . scroll-up-command)
   ("C-/" . recenter-top-bottom)
   ("C-<tab>" . toggle-hiding))
#+END_SRC
** Search & Files
#+BEGIN_SRC emacs-lisp
  (bind-keys*
   ("C-s" . swiper)
   ("M-;" . swiper)
   ("C-x C-v" . counsel-find-file)
   ("C-h v" . counsel-describe-variable)
   ("C-h f" . counsel-describe-function)
   ("C-h o" . counsel-describe-symbol)
   ("C-h l" . counsel-locate))
#+END_SRC
** Tabs
#+BEGIN_SRC emacs-lisp
  (bind-keys*
   ("C-=" . tab-bar-new-tab-to)
   ("C--" . tab-bar-close-tab)
   ("C-{" . tab-bar-switch-to-prev-tab)
   ("C-}" . tab-bar-switch-to-next-tab))
#+END_SRC
** Text Editing
#+BEGIN_SRC emacs-lisp
  (bind-keys*
   ("M-S-<up>" . move-text-up)
   ("M-S-<down>" . move-text-down)
   ("M-I" . move-text-up)
   ("M-K" . move-text-down)
   ("M-SPC" . set-mark-command)
   ("C-S-a" . mark-whole-buffer)
   ("C-d" . delete-forward-char)
   ("C-S-x" . kill-region)
   ("C-S-c" . kill-ring-save)
   ("C-S-v" . yank)
   ("M-c" . comment-dwim)
   ("M-w" . copyit-file-pathname)
   ("C-c i b" . insert-text-begin-src)
   ("C-c i e" . insert-text-end-src))
#+END_SRC
** Text Navigation
#+BEGIN_SRC emacs-lisp
  (bind-keys*
   ("M-i" . previous-line)
   ("M-k" . next-line)
   ("M-j" . left-word)
   ("M-l" . right-word)
   ("M-J" . left-char)
   ("M-L" . right-char)
   ("M-n" . electric-newline-and-maybe-indent)
   ("C-n" . electric-newline-and-maybe-indent)
   ("C-<down>" . jump-to-same-indent)
   ("M-p" . avy-goto-char)
   ("M-/" . swiper-avy)
   ("M-o" . end-of-visual-line)
   ("M-m" . beginning-of-visual-line)
   ("M-h" . back-to-indentation)
   ("C-M-," . mc/mark-previous-like-this)
   ("C-M-." . mc/mark-next-like-this)
   ("C-M-/" . ace-mc-add-multiple-cursors))
#+END_SRC
** Window Navigation
*** Window Movement
#+BEGIN_SRC emacs-lisp
(bind-keys*
 ("C-<up>" . windmove-up)
 ("C-<down>" . windmove-down)
 ("C-<left>" . windmove-left)
 ("C-<right>" . windmove-right)
 ("C-i" . windmove-up)
 ("C-k" . windmove-down)
 ("C-j" . windmove-left)
 ("C-l" . windmove-right)
 ("M-?" . ace-window)
 ("M-|" . ace-delete-window)
 ("C-?" . ace-swap-window)
#+END_SRC
*** Window Resize
#+BEGIN_SRC emacs-lisp
 ("C-w" . doremi-window-height+)
 ("C-c g" . golden-ratio)
#+END_SRC
*** Splitting with M-#
#+BEGIN_SRC emacs-lisp
 ("M-2" . split-window-below)
 ("M-3" . split-window-right)
 ("M-4" . split-4-ways)
 ("M-1" . delete-other-windows)
#+END_SRC
*** Splitting with M--+
#+BEGIN_SRC emacs-lisp
 ("M-9" . split-window-below)
 ("M-0" . split-window-right)
 ("M--" . delete-window)
 ("M-=" . delete-other-windows))
#+END_SRC
* IDE
** LSP
#+BEGIN_SRC emacs-lisp
  (add-to-list 'display-buffer-alist
                       `(,(rx bos "*Flycheck errors*" eos)
                        (display-buffer-reuse-window
                         display-buffer-in-side-window)
                        (side            . bottom)
                        (reusable-frames . visible)
                        (window-height   . 6)))

  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))
#+END_SRC
** Languages
*** C/C++
#+BEGIN_SRC emacs-lisp
;; (use-package c++-mode
;;   :hook
;;   (c++-mode . lsp-deferred)
;;   (c++-mode . flycheck-mode)
;;   :config
;;   (setq c-default-style "linux")
;;   (setq-default c-basic-offset 4))

;; Make a non-standard key binding.  We can put this in
;; c-mode-base-map because c-mode-map, c++-mode-map, and so on,
;; inherit from it.
(defun my-c-initialization-hook ())
;; (define-key c-mode-base-map "\C-m" 'c-context-line-break))
(add-hook 'c-initialization-hook 'my-c-initialization-hook)

;; offset customizations not in my-c-style
;; This will take precedence over any setting of the syntactic symbol
;; made by a style.
(setq c-offsets-alist '((member-init-intro . ++)))

;; Create my personal style.
(defconst my-c-style
  '((c-tab-always-indent        . t)
    (c-comment-only-line-offset . 4)
    (c-hanging-braces-alist     . ((substatement-open after)
                                   (brace-list-open)))
    (c-hanging-colons-alist     . ((member-init-intro before)
                                   (inher-intro)
                                   (case-label after)
                                   (label after)
                                   (access-label after)))
    (c-cleanup-list             . (scope-operator
                                   empty-defun-braces
                                   defun-close-semi))
    (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                   (substatement-open . 0)
                                   (case-label        . 4)
                                   (block-open        . 0)
                                   (knr-argdecl-intro . -)))
    (c-echo-syntactic-information-p . t))
  "My C Programming Style")
(c-add-style "PERSONAL" my-c-style)

;; Customizations for all modes in CC Mode.
(defun my-c-mode-common-hook ()
  ;; set my personal style for the current buffer
  (c-set-style "PERSONAL")
  ;; other customizations
  (setq tab-width 8
        ;; this will make sure spaces are used instead of tabs
        indent-tabs-mode nil)
  ;; we like auto-newline, but not hungry-delete
  (c-toggle-auto-newline -1))
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
(define-key c-mode-base-map (kbd "M-{") 'backward-up-list)
(define-key c-mode-base-map (kbd "M-}") 'down-list)
(define-key c-mode-base-map (kbd "M-{") 'backward-up-list)
(define-key c-mode-base-map (kbd "M-}") 'down-list)
#+END_SRC
*** GLSL
#+BEGIN_SRC emacs-lisp
(use-package glsl-mode
  :ensure t
  :mode "\\.vs\\'"
  :mode "\\.fs\\'")
#+END_SRC
*** Octave
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
      (cons '("\\.m$" . octave-mode) auto-mode-alist))
(add-hook 'octave-mode-hook
          (lambda ()
            (abbrev-mode 1)
            (auto-fill-mode 1)
            (if (eq window-system 'x)
                (font-lock-mode 1))))
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :hook
  (python-mode . lsp-deferred)
  (python-mode . flycheck-mode)
  :bind (:map python-mode-map
	      ("<tab>" . indent-for-tab-command)))
(define-key python-mode-map (kbd "M-{") 'backward-up-list)
(define-key python-mode-map (kbd "M-}") 'down-list)
#+END_SRC
*** Typescript
#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :ensure t
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
#+END_SRC
